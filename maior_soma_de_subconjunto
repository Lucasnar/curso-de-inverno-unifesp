Base: n = 1 => retorna A[1]
Hipótese: sei encontrar o SSM de um conjunto com n-1 elementos
Passo:

café com leite:
soma_max = 0
para inicio = 1 até n-1
    soma = 0
    para elem = início até n-1
        soma += elem
    se soma > soma_max
        soma_max = soma

Divisão e Conquista
não deu pra copiar

Base: n = 1 => retorna A[1]
Hipótese: sei encontrar o SSM de um conjunto com n-1 elementos
Passo:

Fibonacci
Base:
    n = 0 => retorna 0
    n = 1 => retorna 1
Hipótese:
    sei calcular o número de fibonacci para n-1
Passo:
    retorna F(n-1) + F(n-2)


Programação Dinâmica
Tabela T:

T[i] => iésimo termo de Fibonacci

T[0] = 0
T[1] = 1

T[i] = T[i-1] + T[i - 2]

Longest Common Subsequence

Subsequencias
X de tamanho m
Y de tamanho n

Base: 
    m = 1 e n = 1 ==>
    retorna X[1] == Y[1]

Hipótese:
    Sei encontrar SSCOM de X e Y para X com m-1 ou Y com n-1
Passo:
    se X[m] == Y[n]
        retorna 1 + HIPOTESE(X, m-1, Y, n-1)
    senão
        a <= HIPOTESE(X, m-1, Y, n)
        b <= HIPOTESE(X, m, Y, n-1)
        retorna max(a, b)

Programação Dinâmica

1. T[i, j] => solução (SSCOM) de X, i, Y, j

2.
T[0, 0] = 0
T[1, 1] = X[1] == Y[1] (0 ou 1)
if (X[i] == Y[j])
    T[i, j] = 1 + T[i-1, j-1]
else
    T[i, j] = max(T[i-1, j], T(i, j-1))

3.
Para preencher T[2, 3] precisamos de T[1, 2], T[1, 3], T[2, 2], T[0, 1], T[0, 2], T[1, 1]

Para i de 1 ate m
    para j de 1 ate n

4.
A solucao esta em T[m, n]
